import com.modrinth.minotaur.dependencies.ModDependency

plugins {
	id 'fabric-loom' version '1.0-SNAPSHOT'
	id 'maven-publish'
	id "com.modrinth.minotaur" version "2.+"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = "${project.mod_version}+${project.minecraft_version}"
group = project.maven_group

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven {
		// For ModConfig.
		url "https://maven.shedaniel.me/"
	}

	maven {
		url "https://maven.terraformersmc.com/releases/"
	}

	maven {
		// For server-translations.
		url "https://maven.nucleoid.xyz"
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modApi include("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	modImplementation("com.terraformersmc:modmenu:${project.mod_menu_version}") {
		exclude module: 'fabric-api' // includes bad Fabric API
	}

	modImplementation include("fr.catcore:server-translations-api:${project.min_server_translations_version}")

	// Uncomment the following line to enable the deprecated Fabric API modules. 
	// These are included in the Fabric API production distribution and allow you to update your mod to the latest modules at a later more convenient time.

	// modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		maven {
			name = "GitHubPackages"
			url = "https://maven.pkg.github.com/gitsh01/libertyvillagers"
			credentials {
				username = 'gitsh01'
				password = System.getenv("GITHUB_TOKEN")
			}
		}
	}
}

modrinth {
	token = System.getenv("GITHUB_TOKEN")
	// Please use an environment variable for this! The default is `$MODRINTH_TOKEN`.
	projectId = '264clomZ' // The ID of your Modrinth project. Slugs will not work.
	versionType = 'release'
	uploadFile = remapJar // Tells Minotaur to use the remapped jar
	gameVersions = ['1.19.2'] // An array of game versions the version supports
	loaders = ['fabric'] // Self-explanatory.
	dependencies = [
			new ModDependency('P7dR8mSH', 'required') // Creates a new required dependency on Fabric API
	]
	syncBodyFrom = rootProject.file("README.md").text
}